name: Create Release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'release/v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set release tag name
        run: echo "RELEASE_TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Set release version
        run: echo "RELEASE_VERSION=${RELEASE_TAG_NAME#release/v}" >> $GITHUB_ENV
      - run: npm ci
      - run: npm run clean
      - run: npm run build
      - run: npm run pack
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Node
        id: upload-release-asset-node
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ format('./dist/typescript-estree-cli-{0}.zip', env.RELEASE_VERSION) }}
          asset_name: ${{ format('typescript-estree-cli-{0}.zip', env.RELEASE_VERSION) }}
          asset_content_type: application/zip
      - name: Upload Release Win
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ format('./dist/typescript-estree-cli-{0}-win-x64.zip', env.RELEASE_VERSION) }}
          asset_name: ${{ format('typescript-estree-cli-{0}-win-x64.zip', env.RELEASE_VERSION) }}
          asset_content_type: application/zip
      - name: Upload Release Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ format('./dist/typescript-estree-cli-{0}-linux-x64.zip', env.RELEASE_VERSION) }}
          asset_name: ${{ format('typescript-estree-cli-{0}-linux-x64.zip', env.RELEASE_VERSION) }}
          asset_content_type: application/zip
      - name: Upload Release MacOS
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ format('./dist/typescript-estree-cli-{0}-macos-x64.zip', env.RELEASE_VERSION) }}
          asset_name: ${{ format('typescript-estree-cli-{0}-macos-x64.zip', env.RELEASE_VERSION) }}
          asset_content_type: application/zip
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}